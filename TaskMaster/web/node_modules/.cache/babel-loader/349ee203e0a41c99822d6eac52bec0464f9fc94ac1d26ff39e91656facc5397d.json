{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  tags: [{\n    id: 'urgent',\n    name: 'Urgent',\n    color: '#f44336'\n  }, {\n    id: 'important',\n    name: 'Important',\n    color: '#ff9800'\n  }, {\n    id: 'meeting',\n    name: 'Meeting',\n    color: '#4361ee'\n  }, {\n    id: 'idea',\n    name: 'Idea',\n    color: '#4caf50'\n  }, {\n    id: 'review',\n    name: 'Review',\n    color: '#3f37c9'\n  }],\n  loading: false,\n  error: null\n};\nconst tagsSlice = createSlice({\n  name: 'tags',\n  initialState,\n  reducers: {\n    // Set loading state\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    // Set error state\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // Add a new tag\n    addTag: (state, action) => {\n      const id = action.payload.name.toLowerCase().replace(/\\s+/g, '-');\n\n      // Check if tag with this ID already exists\n      if (state.tags.some(tag => tag.id === id)) {\n        state.error = 'A tag with this name already exists';\n        return;\n      }\n      const newTag = {\n        ...action.payload,\n        id\n      };\n      state.tags.push(newTag);\n    },\n    // Update an existing tag\n    updateTag: (state, action) => {\n      const {\n        id,\n        updates\n      } = action.payload;\n      const tagIndex = state.tags.findIndex(tag => tag.id === id);\n      if (tagIndex !== -1) {\n        state.tags[tagIndex] = {\n          ...state.tags[tagIndex],\n          ...updates\n        };\n      }\n    },\n    // Delete a tag\n    deleteTag: (state, action) => {\n      state.tags = state.tags.filter(tag => tag.id !== action.payload);\n    },\n    // Set all tags (used for loading from storage)\n    setTags: (state, action) => {\n      state.tags = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  addTag,\n  updateTag,\n  deleteTag,\n  setTags\n} = tagsSlice.actions;\nexport default tagsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tags","id","name","color","loading","error","tagsSlice","reducers","setLoading","state","action","payload","setError","addTag","toLowerCase","replace","some","tag","newTag","push","updateTag","updates","tagIndex","findIndex","deleteTag","filter","setTags","actions","reducer"],"sources":["C:/Users/swati/Downloads/workspace1/Aiagent/TaskMaster/web/src/store/slices/tagsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Tag } from '../../../../shared/types/task';\r\n\r\ninterface TagsState {\r\n  tags: Tag[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: TagsState = {\r\n  tags: [\r\n    { id: 'urgent', name: 'Urgent', color: '#f44336' },\r\n    { id: 'important', name: 'Important', color: '#ff9800' },\r\n    { id: 'meeting', name: 'Meeting', color: '#4361ee' },\r\n    { id: 'idea', name: 'Idea', color: '#4caf50' },\r\n    { id: 'review', name: 'Review', color: '#3f37c9' },\r\n  ],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst tagsSlice = createSlice({\r\n  name: 'tags',\r\n  initialState,\r\n  reducers: {\r\n    // Set loading state\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    \r\n    // Set error state\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Add a new tag\r\n    addTag: (state, action: PayloadAction<Omit<Tag, 'id'>>) => {\r\n      const id = action.payload.name.toLowerCase().replace(/\\s+/g, '-');\r\n      \r\n      // Check if tag with this ID already exists\r\n      if (state.tags.some(tag => tag.id === id)) {\r\n        state.error = 'A tag with this name already exists';\r\n        return;\r\n      }\r\n      \r\n      const newTag: Tag = {\r\n        ...action.payload,\r\n        id,\r\n      };\r\n      \r\n      state.tags.push(newTag);\r\n    },\r\n    \r\n    // Update an existing tag\r\n    updateTag: (state, action: PayloadAction<{ id: string; updates: Partial<Omit<Tag, 'id'>> }>) => {\r\n      const { id, updates } = action.payload;\r\n      const tagIndex = state.tags.findIndex(tag => tag.id === id);\r\n      \r\n      if (tagIndex !== -1) {\r\n        state.tags[tagIndex] = {\r\n          ...state.tags[tagIndex],\r\n          ...updates,\r\n        };\r\n      }\r\n    },\r\n    \r\n    // Delete a tag\r\n    deleteTag: (state, action: PayloadAction<string>) => {\r\n      state.tags = state.tags.filter(tag => tag.id !== action.payload);\r\n    },\r\n    \r\n    // Set all tags (used for loading from storage)\r\n    setTags: (state, action: PayloadAction<Tag[]>) => {\r\n      state.tags = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setError,\r\n  addTag,\r\n  updateTag,\r\n  deleteTag,\r\n  setTags,\r\n} = tagsSlice.actions;\r\n\r\nexport default tagsSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
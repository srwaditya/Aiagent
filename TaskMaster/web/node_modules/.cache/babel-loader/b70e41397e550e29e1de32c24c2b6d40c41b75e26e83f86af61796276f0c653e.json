{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swati\\\\Downloads\\\\workspace1\\\\Aiagent\\\\TaskMaster\\\\web\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { LIGHT_THEME, DARK_THEME } from '../shared/constants/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: LIGHT_THEME,\n  themeType: 'light',\n  toggleTheme: () => {},\n  setThemeType: () => {}\n});\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check if user has a saved theme preference\n  const getSavedTheme = () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark' || savedTheme === 'light') {\n      return savedTheme;\n    }\n\n    // Check system preference if no saved theme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  };\n  const [themeType, setThemeType] = useState(getSavedTheme());\n\n  // Get the actual theme object based on theme type\n  const theme = themeType === 'dark' ? DARK_THEME : LIGHT_THEME;\n\n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    setThemeType(prevTheme => {\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('theme', newTheme);\n      return newTheme;\n    });\n  };\n\n  // Set a specific theme\n  const handleSetThemeType = type => {\n    setThemeType(type);\n    localStorage.setItem('theme', type);\n  };\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only change theme if user hasn't set a preference\n      if (!localStorage.getItem('theme')) {\n        setThemeType(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    // Add listener for theme changes\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n    } else {\n      // For older browsers\n      mediaQuery.addListener(handleChange);\n    }\n\n    // Clean up\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener('change', handleChange);\n      } else {\n        // For older browsers\n        mediaQuery.removeListener(handleChange);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      themeType,\n      toggleTheme,\n      setThemeType: handleSetThemeType\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"YlZIvV85ztinhXOWsZ2+zompZng=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","LIGHT_THEME","DARK_THEME","jsxDEV","_jsxDEV","ThemeContext","theme","themeType","toggleTheme","setThemeType","useTheme","_s","ThemeProvider","children","_s2","getSavedTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","prevTheme","newTheme","setItem","handleSetThemeType","type","mediaQuery","handleChange","e","addEventListener","addListener","removeEventListener","removeListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/swati/Downloads/workspace1/Aiagent/TaskMaster/web/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { LIGHT_THEME, DARK_THEME } from '../shared/constants/colors';\r\n\r\ntype ThemeType = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: typeof LIGHT_THEME | typeof DARK_THEME;\r\n  themeType: ThemeType;\r\n  toggleTheme: () => void;\r\n  setThemeType: (type: ThemeType) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType>({\r\n  theme: LIGHT_THEME,\r\n  themeType: 'light',\r\n  toggleTheme: () => {},\r\n  setThemeType: () => {},\r\n});\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\ninterface ThemeProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  // Check if user has a saved theme preference\r\n  const getSavedTheme = (): ThemeType => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'dark' || savedTheme === 'light') {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Check system preference if no saved theme\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    \r\n    return 'light';\r\n  };\r\n  \r\n  const [themeType, setThemeType] = useState<ThemeType>(getSavedTheme());\r\n  \r\n  // Get the actual theme object based on theme type\r\n  const theme = themeType === 'dark' ? DARK_THEME : LIGHT_THEME;\r\n  \r\n  // Toggle between light and dark themes\r\n  const toggleTheme = () => {\r\n    setThemeType(prevTheme => {\r\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\r\n      localStorage.setItem('theme', newTheme);\r\n      return newTheme;\r\n    });\r\n  };\r\n  \r\n  // Set a specific theme\r\n  const handleSetThemeType = (type: ThemeType) => {\r\n    setThemeType(type);\r\n    localStorage.setItem('theme', type);\r\n  };\r\n  \r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    \r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      // Only change theme if user hasn't set a preference\r\n      if (!localStorage.getItem('theme')) {\r\n        setThemeType(e.matches ? 'dark' : 'light');\r\n      }\r\n    };\r\n    \r\n    // Add listener for theme changes\r\n    if (mediaQuery.addEventListener) {\r\n      mediaQuery.addEventListener('change', handleChange);\r\n    } else {\r\n      // For older browsers\r\n      mediaQuery.addListener(handleChange);\r\n    }\r\n    \r\n    // Clean up\r\n    return () => {\r\n      if (mediaQuery.removeEventListener) {\r\n        mediaQuery.removeEventListener('change', handleChange);\r\n      } else {\r\n        // For older browsers\r\n        mediaQuery.removeListener(handleChange);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, themeType, toggleTheme, setThemeType: handleSetThemeType }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
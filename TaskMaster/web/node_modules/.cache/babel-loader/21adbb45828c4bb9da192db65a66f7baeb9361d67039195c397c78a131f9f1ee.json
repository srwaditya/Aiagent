{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  categories: [{\n    id: 'work',\n    name: 'Work',\n    color: '#4361ee',\n    icon: 'briefcase'\n  }, {\n    id: 'personal',\n    name: 'Personal',\n    color: '#3f37c9',\n    icon: 'user'\n  }, {\n    id: 'shopping',\n    name: 'Shopping',\n    color: '#f72585',\n    icon: 'shopping-cart'\n  }, {\n    id: 'health',\n    name: 'Health',\n    color: '#4caf50',\n    icon: 'heart'\n  }, {\n    id: 'education',\n    name: 'Education',\n    color: '#ff9800',\n    icon: 'book'\n  }],\n  loading: false,\n  error: null\n};\nconst categoriesSlice = createSlice({\n  name: 'categories',\n  initialState,\n  reducers: {\n    // Set loading state\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    // Set error state\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // Add a new category\n    addCategory: (state, action) => {\n      const id = action.payload.name.toLowerCase().replace(/\\s+/g, '-');\n\n      // Check if category with this ID already exists\n      if (state.categories.some(category => category.id === id)) {\n        state.error = 'A category with this name already exists';\n        return;\n      }\n      const newCategory = {\n        ...action.payload,\n        id\n      };\n      state.categories.push(newCategory);\n    },\n    // Update an existing category\n    updateCategory: (state, action) => {\n      const {\n        id,\n        updates\n      } = action.payload;\n      const categoryIndex = state.categories.findIndex(category => category.id === id);\n      if (categoryIndex !== -1) {\n        state.categories[categoryIndex] = {\n          ...state.categories[categoryIndex],\n          ...updates\n        };\n      }\n    },\n    // Delete a category\n    deleteCategory: (state, action) => {\n      state.categories = state.categories.filter(category => category.id !== action.payload);\n    },\n    // Set all categories (used for loading from storage)\n    setCategories: (state, action) => {\n      state.categories = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  addCategory,\n  updateCategory,\n  deleteCategory,\n  setCategories\n} = categoriesSlice.actions;\nexport default categoriesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","categories","id","name","color","icon","loading","error","categoriesSlice","reducers","setLoading","state","action","payload","setError","addCategory","toLowerCase","replace","some","category","newCategory","push","updateCategory","updates","categoryIndex","findIndex","deleteCategory","filter","setCategories","actions","reducer"],"sources":["C:/Users/swati/Downloads/workspace1/Aiagent/TaskMaster/web/src/store/slices/categoriesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Category } from '../../../../shared/types/task';\r\n\r\ninterface CategoriesState {\r\n  categories: Category[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: CategoriesState = {\r\n  categories: [\r\n    { id: 'work', name: 'Work', color: '#4361ee', icon: 'briefcase' },\r\n    { id: 'personal', name: 'Personal', color: '#3f37c9', icon: 'user' },\r\n    { id: 'shopping', name: 'Shopping', color: '#f72585', icon: 'shopping-cart' },\r\n    { id: 'health', name: 'Health', color: '#4caf50', icon: 'heart' },\r\n    { id: 'education', name: 'Education', color: '#ff9800', icon: 'book' },\r\n  ],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst categoriesSlice = createSlice({\r\n  name: 'categories',\r\n  initialState,\r\n  reducers: {\r\n    // Set loading state\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    \r\n    // Set error state\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Add a new category\r\n    addCategory: (state, action: PayloadAction<Omit<Category, 'id'>>) => {\r\n      const id = action.payload.name.toLowerCase().replace(/\\s+/g, '-');\r\n      \r\n      // Check if category with this ID already exists\r\n      if (state.categories.some(category => category.id === id)) {\r\n        state.error = 'A category with this name already exists';\r\n        return;\r\n      }\r\n      \r\n      const newCategory: Category = {\r\n        ...action.payload,\r\n        id,\r\n      };\r\n      \r\n      state.categories.push(newCategory);\r\n    },\r\n    \r\n    // Update an existing category\r\n    updateCategory: (state, action: PayloadAction<{ id: string; updates: Partial<Omit<Category, 'id'>> }>) => {\r\n      const { id, updates } = action.payload;\r\n      const categoryIndex = state.categories.findIndex(category => category.id === id);\r\n      \r\n      if (categoryIndex !== -1) {\r\n        state.categories[categoryIndex] = {\r\n          ...state.categories[categoryIndex],\r\n          ...updates,\r\n        };\r\n      }\r\n    },\r\n    \r\n    // Delete a category\r\n    deleteCategory: (state, action: PayloadAction<string>) => {\r\n      state.categories = state.categories.filter(category => category.id !== action.payload);\r\n    },\r\n    \r\n    // Set all categories (used for loading from storage)\r\n    setCategories: (state, action: PayloadAction<Category[]>) => {\r\n      state.categories = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setError,\r\n  addCategory,\r\n  updateCategory,\r\n  deleteCategory,\r\n  setCategories,\r\n} = categoriesSlice.actions;\r\n\r\nexport default categoriesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
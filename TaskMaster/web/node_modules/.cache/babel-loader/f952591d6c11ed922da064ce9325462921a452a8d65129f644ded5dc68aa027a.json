{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { TaskStatus } from '../../../../shared/types/task';\nimport { generateTaskId } from '../../../../shared/utils/taskUtils';\nconst initialState = {\n  tasks: [],\n  loading: false,\n  error: null,\n  selectedTaskId: null\n};\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    // Set loading state\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    // Set error state\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // Set selected task\n    setSelectedTask: (state, action) => {\n      state.selectedTaskId = action.payload;\n    },\n    // Add a new task\n    addTask: (state, action) => {\n      const newTask = {\n        ...action.payload,\n        id: generateTaskId(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      state.tasks.push(newTask);\n    },\n    // Update an existing task\n    updateTask: (state, action) => {\n      const {\n        id,\n        updates\n      } = action.payload;\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\n      if (taskIndex !== -1) {\n        state.tasks[taskIndex] = {\n          ...state.tasks[taskIndex],\n          ...updates,\n          updatedAt: new Date()\n        };\n      }\n    },\n    // Delete a task\n    deleteTask: (state, action) => {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n\n      // Clear selected task if it was deleted\n      if (state.selectedTaskId === action.payload) {\n        state.selectedTaskId = null;\n      }\n    },\n    // Update task status\n    updateTaskStatus: (state, action) => {\n      const {\n        id,\n        status\n      } = action.payload;\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\n      if (taskIndex !== -1) {\n        state.tasks[taskIndex].status = status;\n        state.tasks[taskIndex].updatedAt = new Date();\n\n        // If marking as completed, set completedAt\n        if (status === TaskStatus.COMPLETED) {\n          state.tasks[taskIndex].completedAt = new Date();\n        } else {\n          state.tasks[taskIndex].completedAt = undefined;\n        }\n      }\n    },\n    // Update task priority\n    updateTaskPriority: (state, action) => {\n      const {\n        id,\n        priority\n      } = action.payload;\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\n      if (taskIndex !== -1) {\n        state.tasks[taskIndex].priority = priority;\n        state.tasks[taskIndex].updatedAt = new Date();\n      }\n    },\n    // Add tag to task\n    addTagToTask: (state, action) => {\n      const {\n        taskId,\n        tagId\n      } = action.payload;\n      const taskIndex = state.tasks.findIndex(task => task.id === taskId);\n      if (taskIndex !== -1 && !state.tasks[taskIndex].tags.includes(tagId)) {\n        state.tasks[taskIndex].tags.push(tagId);\n        state.tasks[taskIndex].updatedAt = new Date();\n      }\n    },\n    // Remove tag from task\n    removeTagFromTask: (state, action) => {\n      const {\n        taskId,\n        tagId\n      } = action.payload;\n      const taskIndex = state.tasks.findIndex(task => task.id === taskId);\n      if (taskIndex !== -1) {\n        state.tasks[taskIndex].tags = state.tasks[taskIndex].tags.filter(id => id !== tagId);\n        state.tasks[taskIndex].updatedAt = new Date();\n      }\n    },\n    // Set all tasks (used for loading from storage)\n    setTasks: (state, action) => {\n      state.tasks = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  setSelectedTask,\n  addTask,\n  updateTask,\n  deleteTask,\n  updateTaskStatus,\n  updateTaskPriority,\n  addTagToTask,\n  removeTagFromTask,\n  setTasks\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","TaskStatus","generateTaskId","initialState","tasks","loading","error","selectedTaskId","tasksSlice","name","reducers","setLoading","state","action","payload","setError","setSelectedTask","addTask","newTask","id","createdAt","Date","updatedAt","push","updateTask","updates","taskIndex","findIndex","task","deleteTask","filter","updateTaskStatus","status","COMPLETED","completedAt","undefined","updateTaskPriority","priority","addTagToTask","taskId","tagId","tags","includes","removeTagFromTask","setTasks","actions","reducer"],"sources":["C:/Users/swati/Downloads/workspace1/Aiagent/TaskMaster/web/src/store/slices/tasksSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Task, TaskStatus, TaskPriority } from '../../../../shared/types/task';\r\nimport { generateTaskId } from '../../../../shared/utils/taskUtils';\r\n\r\ninterface TasksState {\r\n  tasks: Task[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  selectedTaskId: string | null;\r\n}\r\n\r\nconst initialState: TasksState = {\r\n  tasks: [],\r\n  loading: false,\r\n  error: null,\r\n  selectedTaskId: null,\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    // Set loading state\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    \r\n    // Set error state\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Set selected task\r\n    setSelectedTask: (state, action: PayloadAction<string | null>) => {\r\n      state.selectedTaskId = action.payload;\r\n    },\r\n    \r\n    // Add a new task\r\n    addTask: (state, action: PayloadAction<Omit<Task, 'id' | 'createdAt' | 'updatedAt'>>) => {\r\n      const newTask: Task = {\r\n        ...action.payload,\r\n        id: generateTaskId(),\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n      \r\n      state.tasks.push(newTask);\r\n    },\r\n    \r\n    // Update an existing task\r\n    updateTask: (state, action: PayloadAction<{ id: string; updates: Partial<Task> }>) => {\r\n      const { id, updates } = action.payload;\r\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\r\n      \r\n      if (taskIndex !== -1) {\r\n        state.tasks[taskIndex] = {\r\n          ...state.tasks[taskIndex],\r\n          ...updates,\r\n          updatedAt: new Date(),\r\n        };\r\n      }\r\n    },\r\n    \r\n    // Delete a task\r\n    deleteTask: (state, action: PayloadAction<string>) => {\r\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n      \r\n      // Clear selected task if it was deleted\r\n      if (state.selectedTaskId === action.payload) {\r\n        state.selectedTaskId = null;\r\n      }\r\n    },\r\n    \r\n    // Update task status\r\n    updateTaskStatus: (state, action: PayloadAction<{ id: string; status: TaskStatus }>) => {\r\n      const { id, status } = action.payload;\r\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\r\n      \r\n      if (taskIndex !== -1) {\r\n        state.tasks[taskIndex].status = status;\r\n        state.tasks[taskIndex].updatedAt = new Date();\r\n        \r\n        // If marking as completed, set completedAt\r\n        if (status === TaskStatus.COMPLETED) {\r\n          state.tasks[taskIndex].completedAt = new Date();\r\n        } else {\r\n          state.tasks[taskIndex].completedAt = undefined;\r\n        }\r\n      }\r\n    },\r\n    \r\n    // Update task priority\r\n    updateTaskPriority: (state, action: PayloadAction<{ id: string; priority: TaskPriority }>) => {\r\n      const { id, priority } = action.payload;\r\n      const taskIndex = state.tasks.findIndex(task => task.id === id);\r\n      \r\n      if (taskIndex !== -1) {\r\n        state.tasks[taskIndex].priority = priority;\r\n        state.tasks[taskIndex].updatedAt = new Date();\r\n      }\r\n    },\r\n    \r\n    // Add tag to task\r\n    addTagToTask: (state, action: PayloadAction<{ taskId: string; tagId: string }>) => {\r\n      const { taskId, tagId } = action.payload;\r\n      const taskIndex = state.tasks.findIndex(task => task.id === taskId);\r\n      \r\n      if (taskIndex !== -1 && !state.tasks[taskIndex].tags.includes(tagId)) {\r\n        state.tasks[taskIndex].tags.push(tagId);\r\n        state.tasks[taskIndex].updatedAt = new Date();\r\n      }\r\n    },\r\n    \r\n    // Remove tag from task\r\n    removeTagFromTask: (state, action: PayloadAction<{ taskId: string; tagId: string }>) => {\r\n      const { taskId, tagId } = action.payload;\r\n      const taskIndex = state.tasks.findIndex(task => task.id === taskId);\r\n      \r\n      if (taskIndex !== -1) {\r\n        state.tasks[taskIndex].tags = state.tasks[taskIndex].tags.filter(id => id !== tagId);\r\n        state.tasks[taskIndex].updatedAt = new Date();\r\n      }\r\n    },\r\n    \r\n    // Set all tasks (used for loading from storage)\r\n    setTasks: (state, action: PayloadAction<Task[]>) => {\r\n      state.tasks = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setError,\r\n  setSelectedTask,\r\n  addTask,\r\n  updateTask,\r\n  deleteTask,\r\n  updateTaskStatus,\r\n  updateTaskPriority,\r\n  addTagToTask,\r\n  removeTagFromTask,\r\n  setTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { mockUser } from '../mockData';\nconst initialState = {\n  currentUser: mockUser,\n  loading: false,\n  error: null,\n  isAuthenticated: true\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    // Set loading state\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    // Set error state\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    // Set current user\n    setCurrentUser: (state, action) => {\n      state.currentUser = action.payload;\n      state.isAuthenticated = action.payload !== null;\n    },\n    // Update user preferences\n    updateUserPreferences: (state, action) => {\n      if (state.currentUser) {\n        state.currentUser.preferences = {\n          ...state.currentUser.preferences,\n          ...action.payload\n        };\n      }\n    },\n    // Update user profile\n    updateUserProfile: (state, action) => {\n      if (state.currentUser) {\n        state.currentUser = {\n          ...state.currentUser,\n          ...action.payload\n        };\n      }\n    },\n    // Log out user\n    logoutUser: state => {\n      state.currentUser = null;\n      state.isAuthenticated = false;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  setCurrentUser,\n  updateUserPreferences,\n  updateUserProfile,\n  logoutUser\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","mockUser","initialState","currentUser","loading","error","isAuthenticated","userSlice","name","reducers","setLoading","state","action","payload","setError","setCurrentUser","updateUserPreferences","preferences","updateUserProfile","logoutUser","actions","reducer"],"sources":["C:/Users/swati/Downloads/workspace1/Aiagent/TaskMaster/web/src/store/slices/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { User, UserPreferences } from '../../../../shared/types/user';\r\nimport { mockUser } from '../mockData';\r\n\r\ninterface UserState {\r\n  currentUser: User | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst initialState: UserState = {\r\n  currentUser: mockUser,\r\n  loading: false,\r\n  error: null,\r\n  isAuthenticated: true,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    // Set loading state\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    \r\n    // Set error state\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Set current user\r\n    setCurrentUser: (state, action: PayloadAction<User | null>) => {\r\n      state.currentUser = action.payload;\r\n      state.isAuthenticated = action.payload !== null;\r\n    },\r\n    \r\n    // Update user preferences\r\n    updateUserPreferences: (state, action: PayloadAction<Partial<UserPreferences>>) => {\r\n      if (state.currentUser) {\r\n        state.currentUser.preferences = {\r\n          ...state.currentUser.preferences,\r\n          ...action.payload,\r\n        };\r\n      }\r\n    },\r\n    \r\n    // Update user profile\r\n    updateUserProfile: (state, action: PayloadAction<Partial<Omit<User, 'id' | 'preferences'>>>) => {\r\n      if (state.currentUser) {\r\n        state.currentUser = {\r\n          ...state.currentUser,\r\n          ...action.payload,\r\n        };\r\n      }\r\n    },\r\n    \r\n    // Log out user\r\n    logoutUser: (state) => {\r\n      state.currentUser = null;\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setError,\r\n  setCurrentUser,\r\n  updateUserPreferences,\r\n  updateUserProfile,\r\n  logoutUser,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,QAAQ,QAAQ,aAAa;AAStC,MAAMC,YAAuB,GAAG;EAC9BC,WAAW,EAAEF,QAAQ;EACrBG,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACR;IACAC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO;IAChC,CAAC;IAED;IACAC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IAED;IACAE,cAAc,EAAEA,CAACJ,KAAK,EAAEC,MAAkC,KAAK;MAC7DD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO;MAClCF,KAAK,CAACL,eAAe,GAAGM,MAAM,CAACC,OAAO,KAAK,IAAI;IACjD,CAAC;IAED;IACAG,qBAAqB,EAAEA,CAACL,KAAK,EAAEC,MAA+C,KAAK;MACjF,IAAID,KAAK,CAACR,WAAW,EAAE;QACrBQ,KAAK,CAACR,WAAW,CAACc,WAAW,GAAG;UAC9B,GAAGN,KAAK,CAACR,WAAW,CAACc,WAAW;UAChC,GAAGL,MAAM,CAACC;QACZ,CAAC;MACH;IACF,CAAC;IAED;IACAK,iBAAiB,EAAEA,CAACP,KAAK,EAAEC,MAAgE,KAAK;MAC9F,IAAID,KAAK,CAACR,WAAW,EAAE;QACrBQ,KAAK,CAACR,WAAW,GAAG;UAClB,GAAGQ,KAAK,CAACR,WAAW;UACpB,GAAGS,MAAM,CAACC;QACZ,CAAC;MACH;IACF,CAAC;IAED;IACAM,UAAU,EAAGR,KAAK,IAAK;MACrBA,KAAK,CAACR,WAAW,GAAG,IAAI;MACxBQ,KAAK,CAACL,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXI,UAAU;EACVI,QAAQ;EACRC,cAAc;EACdC,qBAAqB;EACrBE,iBAAiB;EACjBC;AACF,CAAC,GAAGZ,SAAS,CAACa,OAAO;AAErB,eAAeb,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}